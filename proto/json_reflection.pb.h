// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: json_reflection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_json_5freflection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_json_5freflection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_json_5freflection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_json_5freflection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_json_5freflection_2eproto;
namespace json_reflection {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FieldList;
struct FieldListDefaultTypeInternal;
extern FieldListDefaultTypeInternal _FieldList_default_instance_;
class FieldModification;
struct FieldModificationDefaultTypeInternal;
extern FieldModificationDefaultTypeInternal _FieldModification_default_instance_;
class JsonFieldRequest;
struct JsonFieldRequestDefaultTypeInternal;
extern JsonFieldRequestDefaultTypeInternal _JsonFieldRequest_default_instance_;
class JsonFieldResponse;
struct JsonFieldResponseDefaultTypeInternal;
extern JsonFieldResponseDefaultTypeInternal _JsonFieldResponse_default_instance_;
class OperationStatus;
struct OperationStatusDefaultTypeInternal;
extern OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
}  // namespace json_reflection
PROTOBUF_NAMESPACE_OPEN
template<> ::json_reflection::Empty* Arena::CreateMaybeMessage<::json_reflection::Empty>(Arena*);
template<> ::json_reflection::FieldList* Arena::CreateMaybeMessage<::json_reflection::FieldList>(Arena*);
template<> ::json_reflection::FieldModification* Arena::CreateMaybeMessage<::json_reflection::FieldModification>(Arena*);
template<> ::json_reflection::JsonFieldRequest* Arena::CreateMaybeMessage<::json_reflection::JsonFieldRequest>(Arena*);
template<> ::json_reflection::JsonFieldResponse* Arena::CreateMaybeMessage<::json_reflection::JsonFieldResponse>(Arena*);
template<> ::json_reflection::OperationStatus* Arena::CreateMaybeMessage<::json_reflection::OperationStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace json_reflection {

// ===================================================================

class JsonFieldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:json_reflection.JsonFieldRequest) */ {
 public:
  inline JsonFieldRequest() : JsonFieldRequest(nullptr) {}
  ~JsonFieldRequest() override;
  explicit PROTOBUF_CONSTEXPR JsonFieldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonFieldRequest(const JsonFieldRequest& from);
  JsonFieldRequest(JsonFieldRequest&& from) noexcept
    : JsonFieldRequest() {
    *this = ::std::move(from);
  }

  inline JsonFieldRequest& operator=(const JsonFieldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonFieldRequest& operator=(JsonFieldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonFieldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonFieldRequest* internal_default_instance() {
    return reinterpret_cast<const JsonFieldRequest*>(
               &_JsonFieldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JsonFieldRequest& a, JsonFieldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonFieldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonFieldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonFieldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonFieldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonFieldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonFieldRequest& from) {
    JsonFieldRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonFieldRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.JsonFieldRequest";
  }
  protected:
  explicit JsonFieldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldPathFieldNumber = 1,
  };
  // string field_path = 1;
  void clear_field_path();
  const std::string& field_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_path();
  PROTOBUF_NODISCARD std::string* release_field_path();
  void set_allocated_field_path(std::string* field_path);
  private:
  const std::string& _internal_field_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_path(const std::string& value);
  std::string* _internal_mutable_field_path();
  public:

  // @@protoc_insertion_point(class_scope:json_reflection.JsonFieldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// -------------------------------------------------------------------

class JsonFieldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:json_reflection.JsonFieldResponse) */ {
 public:
  inline JsonFieldResponse() : JsonFieldResponse(nullptr) {}
  ~JsonFieldResponse() override;
  explicit PROTOBUF_CONSTEXPR JsonFieldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonFieldResponse(const JsonFieldResponse& from);
  JsonFieldResponse(JsonFieldResponse&& from) noexcept
    : JsonFieldResponse() {
    *this = ::std::move(from);
  }

  inline JsonFieldResponse& operator=(const JsonFieldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonFieldResponse& operator=(JsonFieldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonFieldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonFieldResponse* internal_default_instance() {
    return reinterpret_cast<const JsonFieldResponse*>(
               &_JsonFieldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JsonFieldResponse& a, JsonFieldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonFieldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonFieldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonFieldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonFieldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonFieldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonFieldResponse& from) {
    JsonFieldResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonFieldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.JsonFieldResponse";
  }
  protected:
  explicit JsonFieldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:json_reflection.JsonFieldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// -------------------------------------------------------------------

class FieldList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:json_reflection.FieldList) */ {
 public:
  inline FieldList() : FieldList(nullptr) {}
  ~FieldList() override;
  explicit PROTOBUF_CONSTEXPR FieldList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldList(const FieldList& from);
  FieldList(FieldList&& from) noexcept
    : FieldList() {
    *this = ::std::move(from);
  }

  inline FieldList& operator=(const FieldList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldList& operator=(FieldList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldList* internal_default_instance() {
    return reinterpret_cast<const FieldList*>(
               &_FieldList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldList& a, FieldList& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldList& from) {
    FieldList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.FieldList";
  }
  protected:
  explicit FieldList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated string fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // @@protoc_insertion_point(class_scope:json_reflection.FieldList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// -------------------------------------------------------------------

class FieldModification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:json_reflection.FieldModification) */ {
 public:
  inline FieldModification() : FieldModification(nullptr) {}
  ~FieldModification() override;
  explicit PROTOBUF_CONSTEXPR FieldModification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldModification(const FieldModification& from);
  FieldModification(FieldModification&& from) noexcept
    : FieldModification() {
    *this = ::std::move(from);
  }

  inline FieldModification& operator=(const FieldModification& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldModification& operator=(FieldModification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldModification& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldModification* internal_default_instance() {
    return reinterpret_cast<const FieldModification*>(
               &_FieldModification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldModification& a, FieldModification& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldModification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldModification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldModification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldModification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldModification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldModification& from) {
    FieldModification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldModification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.FieldModification";
  }
  protected:
  explicit FieldModification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldPathFieldNumber = 1,
    kNewValueFieldNumber = 2,
  };
  // string field_path = 1;
  void clear_field_path();
  const std::string& field_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_path();
  PROTOBUF_NODISCARD std::string* release_field_path();
  void set_allocated_field_path(std::string* field_path);
  private:
  const std::string& _internal_field_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_path(const std::string& value);
  std::string* _internal_mutable_field_path();
  public:

  // string new_value = 2;
  void clear_new_value();
  const std::string& new_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_value();
  PROTOBUF_NODISCARD std::string* release_new_value();
  void set_allocated_new_value(std::string* new_value);
  private:
  const std::string& _internal_new_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_value(const std::string& value);
  std::string* _internal_mutable_new_value();
  public:

  // @@protoc_insertion_point(class_scope:json_reflection.FieldModification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// -------------------------------------------------------------------

class OperationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:json_reflection.OperationStatus) */ {
 public:
  inline OperationStatus() : OperationStatus(nullptr) {}
  ~OperationStatus() override;
  explicit PROTOBUF_CONSTEXPR OperationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStatus(const OperationStatus& from);
  OperationStatus(OperationStatus&& from) noexcept
    : OperationStatus() {
    *this = ::std::move(from);
  }

  inline OperationStatus& operator=(const OperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStatus& operator=(OperationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStatus* internal_default_instance() {
    return reinterpret_cast<const OperationStatus*>(
               &_OperationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OperationStatus& a, OperationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationStatus& from) {
    OperationStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.OperationStatus";
  }
  protected:
  explicit OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:json_reflection.OperationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:json_reflection.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "json_reflection.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:json_reflection.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_json_5freflection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JsonFieldRequest

// string field_path = 1;
inline void JsonFieldRequest::clear_field_path() {
  _impl_.field_path_.ClearToEmpty();
}
inline const std::string& JsonFieldRequest::field_path() const {
  // @@protoc_insertion_point(field_get:json_reflection.JsonFieldRequest.field_path)
  return _internal_field_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JsonFieldRequest::set_field_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:json_reflection.JsonFieldRequest.field_path)
}
inline std::string* JsonFieldRequest::mutable_field_path() {
  std::string* _s = _internal_mutable_field_path();
  // @@protoc_insertion_point(field_mutable:json_reflection.JsonFieldRequest.field_path)
  return _s;
}
inline const std::string& JsonFieldRequest::_internal_field_path() const {
  return _impl_.field_path_.Get();
}
inline void JsonFieldRequest::_internal_set_field_path(const std::string& value) {
  
  _impl_.field_path_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonFieldRequest::_internal_mutable_field_path() {
  
  return _impl_.field_path_.Mutable(GetArenaForAllocation());
}
inline std::string* JsonFieldRequest::release_field_path() {
  // @@protoc_insertion_point(field_release:json_reflection.JsonFieldRequest.field_path)
  return _impl_.field_path_.Release();
}
inline void JsonFieldRequest::set_allocated_field_path(std::string* field_path) {
  if (field_path != nullptr) {
    
  } else {
    
  }
  _impl_.field_path_.SetAllocated(field_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_path_.IsDefault()) {
    _impl_.field_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:json_reflection.JsonFieldRequest.field_path)
}

// -------------------------------------------------------------------

// JsonFieldResponse

// string value = 1;
inline void JsonFieldResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& JsonFieldResponse::value() const {
  // @@protoc_insertion_point(field_get:json_reflection.JsonFieldResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JsonFieldResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:json_reflection.JsonFieldResponse.value)
}
inline std::string* JsonFieldResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:json_reflection.JsonFieldResponse.value)
  return _s;
}
inline const std::string& JsonFieldResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void JsonFieldResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonFieldResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* JsonFieldResponse::release_value() {
  // @@protoc_insertion_point(field_release:json_reflection.JsonFieldResponse.value)
  return _impl_.value_.Release();
}
inline void JsonFieldResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:json_reflection.JsonFieldResponse.value)
}

// -------------------------------------------------------------------

// FieldList

// repeated string fields = 1;
inline int FieldList::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int FieldList::fields_size() const {
  return _internal_fields_size();
}
inline void FieldList::clear_fields() {
  _impl_.fields_.Clear();
}
inline std::string* FieldList::add_fields() {
  std::string* _s = _internal_add_fields();
  // @@protoc_insertion_point(field_add_mutable:json_reflection.FieldList.fields)
  return _s;
}
inline const std::string& FieldList::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const std::string& FieldList::fields(int index) const {
  // @@protoc_insertion_point(field_get:json_reflection.FieldList.fields)
  return _internal_fields(index);
}
inline std::string* FieldList::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:json_reflection.FieldList.fields)
  return _impl_.fields_.Mutable(index);
}
inline void FieldList::set_fields(int index, const std::string& value) {
  _impl_.fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:json_reflection.FieldList.fields)
}
inline void FieldList::set_fields(int index, std::string&& value) {
  _impl_.fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:json_reflection.FieldList.fields)
}
inline void FieldList::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:json_reflection.FieldList.fields)
}
inline void FieldList::set_fields(int index, const char* value, size_t size) {
  _impl_.fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:json_reflection.FieldList.fields)
}
inline std::string* FieldList::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline void FieldList::add_fields(const std::string& value) {
  _impl_.fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:json_reflection.FieldList.fields)
}
inline void FieldList::add_fields(std::string&& value) {
  _impl_.fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:json_reflection.FieldList.fields)
}
inline void FieldList::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:json_reflection.FieldList.fields)
}
inline void FieldList::add_fields(const char* value, size_t size) {
  _impl_.fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:json_reflection.FieldList.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FieldList::fields() const {
  // @@protoc_insertion_point(field_list:json_reflection.FieldList.fields)
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FieldList::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:json_reflection.FieldList.fields)
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// FieldModification

// string field_path = 1;
inline void FieldModification::clear_field_path() {
  _impl_.field_path_.ClearToEmpty();
}
inline const std::string& FieldModification::field_path() const {
  // @@protoc_insertion_point(field_get:json_reflection.FieldModification.field_path)
  return _internal_field_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldModification::set_field_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:json_reflection.FieldModification.field_path)
}
inline std::string* FieldModification::mutable_field_path() {
  std::string* _s = _internal_mutable_field_path();
  // @@protoc_insertion_point(field_mutable:json_reflection.FieldModification.field_path)
  return _s;
}
inline const std::string& FieldModification::_internal_field_path() const {
  return _impl_.field_path_.Get();
}
inline void FieldModification::_internal_set_field_path(const std::string& value) {
  
  _impl_.field_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldModification::_internal_mutable_field_path() {
  
  return _impl_.field_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldModification::release_field_path() {
  // @@protoc_insertion_point(field_release:json_reflection.FieldModification.field_path)
  return _impl_.field_path_.Release();
}
inline void FieldModification::set_allocated_field_path(std::string* field_path) {
  if (field_path != nullptr) {
    
  } else {
    
  }
  _impl_.field_path_.SetAllocated(field_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_path_.IsDefault()) {
    _impl_.field_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:json_reflection.FieldModification.field_path)
}

// string new_value = 2;
inline void FieldModification::clear_new_value() {
  _impl_.new_value_.ClearToEmpty();
}
inline const std::string& FieldModification::new_value() const {
  // @@protoc_insertion_point(field_get:json_reflection.FieldModification.new_value)
  return _internal_new_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldModification::set_new_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:json_reflection.FieldModification.new_value)
}
inline std::string* FieldModification::mutable_new_value() {
  std::string* _s = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:json_reflection.FieldModification.new_value)
  return _s;
}
inline const std::string& FieldModification::_internal_new_value() const {
  return _impl_.new_value_.Get();
}
inline void FieldModification::_internal_set_new_value(const std::string& value) {
  
  _impl_.new_value_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldModification::_internal_mutable_new_value() {
  
  return _impl_.new_value_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldModification::release_new_value() {
  // @@protoc_insertion_point(field_release:json_reflection.FieldModification.new_value)
  return _impl_.new_value_.Release();
}
inline void FieldModification::set_allocated_new_value(std::string* new_value) {
  if (new_value != nullptr) {
    
  } else {
    
  }
  _impl_.new_value_.SetAllocated(new_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_value_.IsDefault()) {
    _impl_.new_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:json_reflection.FieldModification.new_value)
}

// -------------------------------------------------------------------

// OperationStatus

// bool success = 1;
inline void OperationStatus::clear_success() {
  _impl_.success_ = false;
}
inline bool OperationStatus::_internal_success() const {
  return _impl_.success_;
}
inline bool OperationStatus::success() const {
  // @@protoc_insertion_point(field_get:json_reflection.OperationStatus.success)
  return _internal_success();
}
inline void OperationStatus::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void OperationStatus::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:json_reflection.OperationStatus.success)
}

// string message = 2;
inline void OperationStatus::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OperationStatus::message() const {
  // @@protoc_insertion_point(field_get:json_reflection.OperationStatus.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationStatus::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:json_reflection.OperationStatus.message)
}
inline std::string* OperationStatus::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:json_reflection.OperationStatus.message)
  return _s;
}
inline const std::string& OperationStatus::_internal_message() const {
  return _impl_.message_.Get();
}
inline void OperationStatus::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationStatus::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* OperationStatus::release_message() {
  // @@protoc_insertion_point(field_release:json_reflection.OperationStatus.message)
  return _impl_.message_.Release();
}
inline void OperationStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:json_reflection.OperationStatus.message)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace json_reflection

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_json_5freflection_2eproto
