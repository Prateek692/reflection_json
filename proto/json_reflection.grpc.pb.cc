// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: json_reflection.proto

#include "json_reflection.pb.h"
#include "json_reflection.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace json_reflection {

static const char* JsonReflectionService_method_names[] = {
  "/json_reflection.JsonReflectionService/GetJsonField",
  "/json_reflection.JsonReflectionService/ListFields",
  "/json_reflection.JsonReflectionService/ModifyField",
};

std::unique_ptr< JsonReflectionService::Stub> JsonReflectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JsonReflectionService::Stub> stub(new JsonReflectionService::Stub(channel, options));
  return stub;
}

JsonReflectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetJsonField_(JsonReflectionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFields_(JsonReflectionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyField_(JsonReflectionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JsonReflectionService::Stub::GetJsonField(::grpc::ClientContext* context, const ::json_reflection::JsonFieldRequest& request, ::json_reflection::JsonFieldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::json_reflection::JsonFieldRequest, ::json_reflection::JsonFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJsonField_, context, request, response);
}

void JsonReflectionService::Stub::async::GetJsonField(::grpc::ClientContext* context, const ::json_reflection::JsonFieldRequest* request, ::json_reflection::JsonFieldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::json_reflection::JsonFieldRequest, ::json_reflection::JsonFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJsonField_, context, request, response, std::move(f));
}

void JsonReflectionService::Stub::async::GetJsonField(::grpc::ClientContext* context, const ::json_reflection::JsonFieldRequest* request, ::json_reflection::JsonFieldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJsonField_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::JsonFieldResponse>* JsonReflectionService::Stub::PrepareAsyncGetJsonFieldRaw(::grpc::ClientContext* context, const ::json_reflection::JsonFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::json_reflection::JsonFieldResponse, ::json_reflection::JsonFieldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJsonField_, context, request);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::JsonFieldResponse>* JsonReflectionService::Stub::AsyncGetJsonFieldRaw(::grpc::ClientContext* context, const ::json_reflection::JsonFieldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJsonFieldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status JsonReflectionService::Stub::ListFields(::grpc::ClientContext* context, const ::json_reflection::Empty& request, ::json_reflection::FieldList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::json_reflection::Empty, ::json_reflection::FieldList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFields_, context, request, response);
}

void JsonReflectionService::Stub::async::ListFields(::grpc::ClientContext* context, const ::json_reflection::Empty* request, ::json_reflection::FieldList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::json_reflection::Empty, ::json_reflection::FieldList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFields_, context, request, response, std::move(f));
}

void JsonReflectionService::Stub::async::ListFields(::grpc::ClientContext* context, const ::json_reflection::Empty* request, ::json_reflection::FieldList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFields_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::FieldList>* JsonReflectionService::Stub::PrepareAsyncListFieldsRaw(::grpc::ClientContext* context, const ::json_reflection::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::json_reflection::FieldList, ::json_reflection::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFields_, context, request);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::FieldList>* JsonReflectionService::Stub::AsyncListFieldsRaw(::grpc::ClientContext* context, const ::json_reflection::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFieldsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status JsonReflectionService::Stub::ModifyField(::grpc::ClientContext* context, const ::json_reflection::FieldModification& request, ::json_reflection::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::json_reflection::FieldModification, ::json_reflection::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyField_, context, request, response);
}

void JsonReflectionService::Stub::async::ModifyField(::grpc::ClientContext* context, const ::json_reflection::FieldModification* request, ::json_reflection::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::json_reflection::FieldModification, ::json_reflection::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyField_, context, request, response, std::move(f));
}

void JsonReflectionService::Stub::async::ModifyField(::grpc::ClientContext* context, const ::json_reflection::FieldModification* request, ::json_reflection::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyField_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::OperationStatus>* JsonReflectionService::Stub::PrepareAsyncModifyFieldRaw(::grpc::ClientContext* context, const ::json_reflection::FieldModification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::json_reflection::OperationStatus, ::json_reflection::FieldModification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModifyField_, context, request);
}

::grpc::ClientAsyncResponseReader< ::json_reflection::OperationStatus>* JsonReflectionService::Stub::AsyncModifyFieldRaw(::grpc::ClientContext* context, const ::json_reflection::FieldModification& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyFieldRaw(context, request, cq);
  result->StartCall();
  return result;
}

JsonReflectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JsonReflectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JsonReflectionService::Service, ::json_reflection::JsonFieldRequest, ::json_reflection::JsonFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JsonReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::json_reflection::JsonFieldRequest* req,
             ::json_reflection::JsonFieldResponse* resp) {
               return service->GetJsonField(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JsonReflectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JsonReflectionService::Service, ::json_reflection::Empty, ::json_reflection::FieldList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JsonReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::json_reflection::Empty* req,
             ::json_reflection::FieldList* resp) {
               return service->ListFields(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JsonReflectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JsonReflectionService::Service, ::json_reflection::FieldModification, ::json_reflection::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JsonReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::json_reflection::FieldModification* req,
             ::json_reflection::OperationStatus* resp) {
               return service->ModifyField(ctx, req, resp);
             }, this)));
}

JsonReflectionService::Service::~Service() {
}

::grpc::Status JsonReflectionService::Service::GetJsonField(::grpc::ServerContext* context, const ::json_reflection::JsonFieldRequest* request, ::json_reflection::JsonFieldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JsonReflectionService::Service::ListFields(::grpc::ServerContext* context, const ::json_reflection::Empty* request, ::json_reflection::FieldList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JsonReflectionService::Service::ModifyField(::grpc::ServerContext* context, const ::json_reflection::FieldModification* request, ::json_reflection::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace json_reflection

